///*
// * Copyright 2015 Red Hat, Inc. and/or its affiliates.
// *
// * Licensed under the Apache License, Version 2.0 (the "License");
// * you may not use this file except in compliance with the License.
// *
// *      http://www.apache.org/licenses/LICENSE-2.0
// *
// * Unless required by applicable law or agreed to in writing, software
// * distributed under the License is distributed on an "AS IS" BASIS,
// * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// * See the License for the specific language governing permissions and
// * limitations under the License.
//*/

package org.engcia;
// package must be defined in packages from kmodule.xml file

//list any import classes here.
import org.engcia.View.UI
import org.engcia.BC.Hypothesis
import org.engcia.BC.KnowledgeBase
import org.engcia.BC.KnowledgeBase.Finality
import org.engcia.BC.KnowledgeBase.BudgetType
import org.engcia.BC.Conclusion
import org.engcia.BC.Evidence
import java.io.BufferedReader
import java.io.InputStreamReader
import org.engcia.BD.Storage
import org.engcia.BD.PowerSupply.EnergyEfficiency
import java.util.List
import org.engcia.BD.RAM
import org.engcia.BD.RAMType
import org.engcia.Utils.Questions
import org.engcia.BD.Case
import org.engcia.BD.GPU
import java.util.Scanner
import org.engcia.BC.Fact
import org.engcia.BD.CPUCooler

global KnowledgeBase $kb;

rule "r1a - Budget question between 300 and 600"
    when
        eval(UI.answerBudget(Questions.CHOOSE_BUDGET,300,600))
    then
//	    $kb = new KnowledgeBase();
        $kb.setBudgetType(KnowledgeBase.BudgetType.BAIXO);
//        insert(h);
end

rule "r1b - Budget question between 600 and 1000"
	when
		eval(UI.answerBudget(Questions.CHOOSE_BUDGET,600,1000))
	then
        $kb = new KnowledgeBase();
        $kb.setBudgetType(KnowledgeBase.BudgetType.MEDIO_BAIXO);
//        insert(h);
end

rule "r1c - Budget question between 1000 and 1500"
	when
		eval(UI.answerBudget(Questions.CHOOSE_BUDGET,1000,1500))
	then
        $kb = new KnowledgeBase();
        $kb.setBudgetType(KnowledgeBase.BudgetType.MEDIO);
//        insert(h);
end

rule "r1d - Budget question between 1500 and 2000"
	when
		eval(UI.answerBudget(Questions.CHOOSE_BUDGET,1500,2000))
	then
        $kb = new KnowledgeBase();
        $kb.setBudgetType(KnowledgeBase.BudgetType.MEDIO_ALTO);
//        insert(h);
end

rule "r1e - Budget question more than 2000"
	when
		eval(UI.answerBudget(Questions.CHOOSE_BUDGET,2000,Integer.MAX_VALUE))
	then
        $kb = new KnowledgeBase();
        $kb.setBudgetType(KnowledgeBase.BudgetType.ALTO);
//        insert(h);
end

rule "r2a1 - Finality question when Budget type is low and answer is Simple Web Navigation "
    when
	    Hypothesis( description == "budgetType", value == "BAIXO")
        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "1"))
        eval(UI.answer(Questions.CHOOSE_FINALITY_NAVEGACAO_WEB, "1"))
	then
//	    KnowledgeBase h = $kb;
	    $kb.setFinality( KnowledgeBase.Finality.NAVEGACAO_WEB_SIMPLES);
//		delete($kb);
//		insert(h);
end

rule "r2a2 - Finality question when Budget type is low and answer is Complex Web Navigation "
	when
	    Hypothesis( description == "budgetType", value == "BAIXO")
        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "1"))
        eval(UI.answer(Questions.CHOOSE_FINALITY_NAVEGACAO_WEB, "2"))
	then
//		KnowledgeBase h = $kb;
        $kb.setFinality( KnowledgeBase.Finality.NAVEGACAO_WEB_COMPLEXO);
//        delete($kb);
//        insert(h);
end

rule "r2b1 - Finality question when Budget type is low and answer is Simple Office Applications "
	when
        Hypothesis( description == "budgetType", value == "BAIXO")
        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "2"))
        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_OFFICE, "1"))
	then
//		KnowledgeBase h = $kb;
        $kb.setFinality( KnowledgeBase.Finality.APLICACOES_OFFICE_BASICO);
//        insert(h);
end
//
//rule "r2b2 - Finality question when Budget type is low and answer is Professional Office Applications"
//	when
//         Hypothesis( description == "budgetType", value == "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "2"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_OFFICE, "2"))
//	then
//	    KnowledgeBase h = new KnowledgeBase();
//	    h.setFinality( Finality.APLICACOES_OFFICE_PROFISSIONAL);
//		insert(h);
//end
//
//rule "r2c11 - Finality question when Budget type is low and answer is Professional Applications with Local DB"
//	when
//	Hypothesis( description == "budgetType", value == "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "1") || UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "3"))
//	then
//	    KnowledgeBase h = new KnowledgeBase();
//	    h.setFinality( Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_LOCAIS);
//		insert(h);
//end
//
//rule "r2c12 - Finality question when Budget type is low and answer is Professional Applications with remote DB"
//   	when
//   	    Hypothesis( description == "budgetType", value == "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "2"))
//    then
//	    KnowledgeBase h = new KnowledgeBase();
//   	    h.setFinality( Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_REMOTAS);
//   		insert(h);
//   end
//
//rule "r2c2 - Finality question when Budget type is low and answer is Professional Applications without DB"
//	when
//	    Hypothesis( description == "budgetType", value == "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "2"))
//	then
//        KnowledgeBase h = new KnowledgeBase();
//        h.setFinality( Finality.APLICACOES_PROFISSIONAIS_SEM_BASE_DADOS);
//        insert(h);
//end
//
//rule "r3a1 - Finality question when Budget type is not low and answer is Simple Web Navigation"
//	when
//	    Hypothesis( description == "budgetType", value != "NA")
//	    Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NAVEGACAO_WEB, "1"))
//	then
//	    KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( KnowledgeBase.Finality.NAVEGACAO_WEB_SIMPLES);
//		insert(h);
//end
//
//rule "r3a2 - Finality question when Budget type isn't low and answer is Complex Web Navigation"
//	when
//	    Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NAVEGACAO_WEB, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.NAVEGACAO_WEB_COMPLEXO);
//		insert(h);
//end
//
//rule "r3b1 - Finality question when Budget type isn't low and answer is Simple Office Applications"
//	when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "2"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_OFFICE, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.APLICACOES_OFFICE_BASICO);
//		insert(h);
//end
//
//rule "r3b2 - Finality question when Budget type isn't low and answer is Professional Office Applications"
//	when
//	   	Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "2"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_OFFICE, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.APLICACOES_OFFICE_PROFISSIONAL);
//		insert(h);
//end
//
//rule "r3c11 - Finality question when Budget type isn't low and answer is Professional Applications with Local DB"
//    when
//	   	Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "1") || UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "3"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_LOCAIS);
//		insert(h);
//end
//
//rule "r3c12 - Finality question when Budget type isn't low and answer is Professional Applications with Remote DB"
//    when
//	   	Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "1"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_TYPE_OF_DATA_BASE, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.setFinality( Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_REMOTAS);
//		insert(h);
//end
//
//rule "r3c2 - Finality question when Budget type isn't low and answer is Professional Applications without DB"
//    when
//	   	Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "3"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_APLICACOES_PROFISSIONAIS, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.APLICACOES_PROFISSIONAIS_SEM_BASE_DADOS);
//		insert(h);
//end
//
//rule "r3d1 - Finality question when Budget type isn't low and answer is Basic Games"
//    when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "4"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.JOGOS_BASICOS);
//	    h.setNeedsDedicatedGPU(true);
//		insert(h);
//end
//
//rule "r3e1 - Finality question when Budget type isn't low and answer is Advanced Programs of 3d Modelation"
//    when
//	    Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "5"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_PROGRAMAS_AVANCADOS, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.PROGRAMAS_AVANCADOS_MODELACAO_3D);
//		insert(h);
//end
//
//rule "r3e2 - Finality question when Budget type isn't low and answer is Advanced Programs of Graphic Design"
//    when
//	    Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "5"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_PROGRAMAS_AVANCADOS, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.PROGRAMAS_AVANCADOS_DESIGN_GRAFICO);
//		insert(h);
//end
//
//rule "r3e3 - Finality question when Budget type isn't low and answer is Advanced Programs of Mathematic Calculus"
//    when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "5"))
//        eval(UI.answer(Questions.CHOOSE_FINALITY_PROGRAMAS_AVANCADOS, "3"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.PROGRAMAS_AVANCADOS_CALCULO_MATEMATICO);
//		insert(h);
//end
//
//rule "r3f1 - Finality question when Budget type isn't low and answer is Gaming"
//    when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "6"))
//	then
//        KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.GAMING);
//      	h.setNeedsDedicatedGPU(true);
//		insert(h);
//end
//
//rule "r3g1 - Finality question when Budget type isn't low and answer is Basic Image Treatment"
//    when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "7"))
//        eval(UI.answer(Questions.CHOOSE_IMAGE_TREATMENT_TYPE, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.TRATAMENTO_DE_IMAGEM_BASICO);
//		insert(h);
//end
//
//rule "r3g1 - Finality question when Budget type isn't low and answer is Professional Image Treatment"
//    when
//	    Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "7"))
//        eval(UI.answer(Questions.CHOOSE_IMAGE_TREATMENT_TYPE, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.TRATAMENTO_DE_IMAGEM_PROFISSIONAL);
//		insert(h);
//end
//
//rule "r3h1 - Finality question when Budget type isn't low and answer is Video Edition 4K/8K"when
//        Hypothesis( description == "budgetType", value != "NA")
//        Hypothesis( description == "budgetType", value != "BAIXO")
//        eval(UI.answer(Questions.CHOOSE_FINALITY_NON_LOW_BUDGET, "8"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.setFinality( Finality.EDICAO_DE_VIDEO_4k_8K);
//	    h.setNeedsDedicatedGPU(true);
//		insert(h);
//end
//
//rule "r5a1 - File Type and Daily use question when Finality is Simple Web Navigation and answers are Word/excel/PowerPoint and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality != finality.NA && finality == Finality.NAVEGACAO_WEB_SIMPLES)
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//
//        insert(h);
//end
//
//rule "r5a2 - File Type and Daily use question when Finality is Simple Web Navigation and answers are Word/excel/PowerPoint and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality!= finality.NA && finality == Finality.NAVEGACAO_WEB_SIMPLES )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5a3 - File Type and Daily use question when Finality is Simple Web Navigation and answers are Images and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase(finality!= finality.NA && finality == Finality.NAVEGACAO_WEB_SIMPLES )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5a4 - File Type and Daily use question when Finality is Simple Web Navigation and answers are Images and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase(finality!= finality.NA && finality == Finality.NAVEGACAO_WEB_SIMPLES )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	    KnowledgeBase h = new KnowledgeBase();
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5b1 - File Type and Daily use question when Finality is Complex Web Navigation and answers are Word/excel/PowerPoint and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase(finality!= finality.NA && finality == Finality.NAVEGACAO_WEB_COMPLEXO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5b2 - File Type and Daily use question when Finality is Complex Web Navigation and answers are Word/excel/PowerPoint and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase(finality!= finality.NA && finality == Finality.NAVEGACAO_WEB_COMPLEXO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5b3 - File Type and Daily use question when Finality is Complex Web Navigation and answers are Images and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.NAVEGACAO_WEB_COMPLEXO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5b4 - File Type and Daily use question when Finality is Complex Web Navigation and answers are Images and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.NAVEGACAO_WEB_COMPLEXO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5c1 - File Type and Daily use question when Finality is Simple Office Applications and answers are Word/excel/PowerPoint and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_BASICO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5c2 - File Type and Daily use question when Finality is Simple Office Applications and answers are Word/excel/PowerPoint and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_BASICO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5c3 - File Type and Daily use question when Finality is Simple Office Applications and answers are Images and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_BASICO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5c4 - File Type and Daily use question when Finality is Simple Office Applications and answers are Images and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_BASICO )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(8);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(120);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5d1 - File Type and Daily use question when Finality is Professional Office Applications and answers are Word/excel/PowerPoint and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_PROFISSIONAL )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5d2 - File Type and Daily use question when Finality is Professional Office Applications and answers are Word/excel/PowerPoint and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_PROFISSIONAL )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "1"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5d3 - File Type and Daily use question when Finality is Professional Office Applications and answers are Images and 2 to 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_PROFISSIONAL )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(240);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(1);
//        insert(h);
//end
//
//rule "r5d4 - File Type and Daily use question when Finality is Professional Office Applications and answers are Word/excel/PowerPoint and more than 4 hours a day - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_OFFICE_PROFISSIONAL )
//        eval(UI.answer(Questions.CHOOSE_FILE_TYPE, "2"))
//        eval(UI.answer(Questions.CHOOSE_DURATION_PER_DAY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5e1 - When Finality is Professional Applications without DB - used to find define ideal storage and RAM "
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_PROFISSIONAIS_SEM_BASE_DADOS )
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.minStorage.isSSD = true;
//        h.setMinStorage(480);
//        h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(2);
//        insert(h);
//end
//
//rule "r5e21 - When Finality is Professional Applications with Local DB - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_LOCAIS)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(480);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5e22 - When Finality is Professional Applications with Remote DB - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.APLICACOES_PROFISSIONAIS_COM_BASE_DADOS_REMOTAS)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5d1 - When Finality is Basic Games - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.JOGOS_BASICOS)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(16);
//        h.setMinRAMSpeed(3600);
//        h.setAdequateMinCPUBenchmark(140);
//        h.setAdequateMinGPUBenchmark(100);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5e1 - When Finality is Advanced Programs of 3D Modelation - used to find define ideal storage and RAM"
//    when
//	    KnowledgeBase( finality == Finality.PROGRAMAS_AVANCADOS_MODELACAO_3D)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(170);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5e2 - When Finality is Advanced Programs of Graphic Design - used to find define ideal storage, RAM and CPU"
//    when
//	    KnowledgeBase( finality == Finality.PROGRAMAS_AVANCADOS_DESIGN_GRAFICO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(170);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5e3 - When Finality is Advanced Programs of Mathematic Calculus - used to find define ideal storage, RAM and CPU"
//    when
//	    KnowledgeBase( finality == Finality.PROGRAMAS_AVANCADOS_CALCULO_MATEMATICO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(170);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5f1 - When Finality is Basic Image Treatment - used to find define ideal storage, RAM and CPU"
//    when
//	    KnowledgeBase( finality == Finality.TRATAMENTO_DE_IMAGEM_BASICO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.minScndStorage.isSATA = true;
//       h.setMinScndStorage(1000);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(2600);
//        h.setAdequateMinCPUBenchmark(170);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5f2 - When Finality is Professional Image Treatment - used to find define ideal storage, RAM and CPU"
//    when
//	    KnowledgeBase( finality == Finality.TRATAMENTO_DE_IMAGEM_PROFISSIONAL)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.minScndStorage.isSATA = true;
//       h.setMinScndStorage(2000);
//       h.setMinRAMPreferred(32);
//        h.setMinRAMSpeed(3200);
//        h.setAdequateMinCPUBenchmark(180);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5g1 - When Finality is 4K/8K Video Editing - used to find define ideal storage, RAM and CPU"
//    when
//	    KnowledgeBase( finality == Finality.EDICAO_DE_VIDEO_4k_8K)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.minScndStorage.isSATA= true;
//       h.setMinScndStorage(1000);
//       h.setMinRAMPreferred(32);
//       h.setMinRAMSpeed(2600);
//       h.setAdequateMinCPUBenchmark(170);
//        h.setAdequateMinGPUBenchmark(100);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5h11 - When Finality is Gaming and Budget Type is Medium Low  - used to find define ideal storage, RAM, CPU and GPU"
//    when
//	    KnowledgeBase( finality == Finality.GAMING)
//	    KnowledgeBase (budgetType == BudgetType.MEDIO_BAIXO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//       h.setMinRAMSpeed(2600);
//       h.setAdequateMinCPUBenchmark(170);
//       h.setAdequateMinGPUBenchmark(120);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5h12 - When Finality is Gaming and Budget Type is Medium - used to find define ideal storage, RAM, CPU and GPU"
//    when
//	    KnowledgeBase( finality == Finality.GAMING)
//	    KnowledgeBase (budgetType == BudgetType.MEDIO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//       h.setMinRAMSpeed(2600);
//       h.setAdequateMinCPUBenchmark(170);
//       h.setAdequateMinGPUBenchmark(120);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5h13 - When Finality is Gaming and Budget Type is Medium High - used to find define ideal storage, RAM, CPU and GPU"
//    when
//	    KnowledgeBase( finality == Finality.GAMING )
//	    KnowledgeBase (budgetType == BudgetType.MEDIO_ALTO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//       h.setMinRAMSpeed(2600);
//       h.setAdequateMinCPUBenchmark(170);
//       h.setAdequateMinGPUBenchmark(170);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//rule "r5h14 - When Finality is Gaming and Budget Type is High - used to find define ideal storage, RAM, CPU and GPU"
//    when
//	    KnowledgeBase( finality == Finality.GAMING)
//	    KnowledgeBase (budgetType == BudgetType.ALTO)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	   h.minStorage.isSSD = true;
//       h.setMinStorage(240);
//       h.setMinRAMPreferred(32);
//       h.setMinRAMSpeed(2600);
//       h.setAdequateMinCPUBenchmark(170);
//       h.setAdequateMinGPUBenchmark(200);
//        h.setDurationDayChoice(2);
//       insert(h);
//end
//
//
//rule "r6b2.1 - When System sugests minimum storage of 480 and user wants to change it"
//    when
//	    $h : KnowledgeBase(minStorage.capacity!=0)
//        eval(UI.answer(Questions.CHOOSE_INITIAL_STORAGE.replace("XXX",String.valueOf($h.minStorage.capacity)), "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.minStorage.capacity *=2 ;
//        insert(h);
//end
//
//
//
//rule "r6b1 - When user wants to add or insert a 2nd storage (HDD), adding a storage of 1TB"
//    when
//	    KnowledgeBase( durationDayChoice!=0)
//        eval(UI.answer(Questions.CHOOSE_2ND_STORAGE, "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinScndStorage(1000);
//        h.minScndStorage.isSATA = true;
//        insert(h);
//end
//
//rule "r6b1 - When user wants to add or insert a 2nd storage (HDD), adding a storage of 2TB"
//    when
//	    KnowledgeBase( durationDayChoice!=0)
//        eval(UI.answer(Questions.CHOOSE_2ND_STORAGE, "2"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinScndStorage(2000);
//        h.minScndStorage.isSATA = true;
//        insert(h);
//end
//
//rule "r6b1 - When user wants to add or insert a 2nd storage (HDD), adding a storage of 4TB"
//    when
//	    KnowledgeBase( durationDayChoice!=0)
//        eval(UI.answer(Questions.CHOOSE_2ND_STORAGE, "3"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinScndStorage(4000);
//        h.minScndStorage.isSATA = true;
//        insert(h);
//end
//
//
//
//rule "r7a3 - When user wants to change RAM Storage"
//    when
//	    $h : KnowledgeBase (durationDayChoice!=0)
//        eval(UI.answer(Questions.CHOOSE_RAM.replace("XXX",String.valueOf($h.minRAMPreferred)), "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinRAM(h.minRAMPreferred *2);
//        insert(h);
//end
//
//
//
//
//
//// USER DOESNT NEED GPU BUT WANTS ONE
//
//rule "r7bf1 - System doesn't need a Dedicated GPU but user wants one"
//
//    when
//        KnowledgeBase(durationDayChoice!=0 )
//        KnowledgeBase(finality != Finality.NA && finality != Finality.GAMING && finality != Finality.JOGOS_BASICOS && finality != Finality.EDICAO_DE_VIDEO_4k_8K)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_DEDICATED_GRAPHICS_CARD, "1"))
//    then
//	    KnowledgeBase h = new KnowledgeBase();
//        h.setPrefersDedicatedGPU(true);
//        insert(h);
//end
//
//
//
//// CHOOSING DEDICATED GRAPHICS CARD
//
//rule "r8a1 - Choose GPU Manufacturer, answer NVIDIA"
//    when
//        KnowledgeBase(durationDayChoice!=0 )
//        KnowledgeBase (needsDedicatedGPU == true || prefersDedicatedGPU == true)
//        eval(UI.answer(Questions.CHOOSE_GPU_MANUFACTURER, "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//    h.setGpuManufacturerPreferred("NVIDIA");
//    insert(h);
//end
//
//
//rule "r8a2 - Choose GPU Manufacturer, answer AMD"
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase (needsDedicatedGPU == true || prefersDedicatedGPU == true)
//        eval(UI.answer(Questions.CHOOSE_GPU_MANUFACTURER, "2"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//    h.setGpuManufacturerPreferred("AMD");
//    insert(h);
//end
//
//// Question Brand GPU preference
//
//rule "r8b1 - Finality is Gaming, user has GPU brand preference of ASUS"
//    when
//        KnowledgeBase(durationDayChoice!=0 )
//        KnowledgeBase(finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_PREFERRED_GPU_BRAND, "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setPreferredGPUBrand("ASUS");
//        insert(h);
//end
//
//rule "r8b2 - Finality is Gaming, user has GPU brand preference of EVGA"
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_PREFERRED_GPU_BRAND, "2"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setPreferredGPUBrand("EVGA");
//        insert(h);
//end
//
//rule "r8b3 - Finality is Gaming, user has GPU brand preference of GigaByte"
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_PREFERRED_GPU_BRAND, "3"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setPreferredGPUBrand("Gigabyte");
//        insert(h);
//end
//
//rule "r8b4 - Finality is Gaming, user has GPU brand preference of MSI"
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_PREFERRED_GPU_BRAND, "4"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setPreferredGPUBrand("MSI");
//        insert(h);
//end
//
//rule "r8b5 - Finality is Gaming, user has GPU brand preference of Sapphire"
//    when
//        KnowledgeBase(durationDayChoice!=0 )
//        KnowledgeBase(finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_IF_WANTS_PREFERRED_GPU_BRAND, "6"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setPreferredGPUBrand("Sapphire");
//        insert(h);
//end
//
//
//rule "r9a1 - User has CPU manufacturer preference, INTEL "
//
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_CPU_MANUFACTURER, "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setCpuManufacturerPreferred("INTEL");
//        insert(h);
//end
//
//rule "r9a2 - User has CPU manufacturer preference, AMD "
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_CPU_MANUFACTURER, "2"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//    h.setCpuManufacturerPreferred("AMD");
//        insert(h);
//end
//
//rule "r10a1 - Finality is Gaming, user wants to do OC and prefers WaterCooling "
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality != Finality.NA && finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_CPU_OC, "1"))
//        eval(UI.answer(Questions.CHOOSE_COOLER_TYPE, "1"))
//    then
//	  KnowledgeBase h = new KnowledgeBase("");
//    h.setNeedsCPUCooler(true);
//    h.setCpuCooler(new CPUCooler());
//    h.cpuCooler.isWaterCooled = true;
//    insert(h);
//end
//
//rule "r10a2 - Finality is Gaming, user wants to do OC and prefers Fanless "
//    when
//        KnowledgeBase(durationDayChoice!=0 )
//        KnowledgeBase(finality != Finality.NA && finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_CPU_OC, "1"))
//        eval(UI.answer(Questions.CHOOSE_COOLER_TYPE, "2"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//    h.setNeedsCPUCooler(true);
//    h.setCpuCooler(new CPUCooler());
//    h.cpuCooler.isFanless = true;
//    insert(h);
//end
//
//rule "r10a3 - Finality is Gaming, user wants to do OC and prefers Normal or doesnt have preference "
//    when
//        KnowledgeBase(durationDayChoice!=0)
//        KnowledgeBase(finality != Finality.NA && finality == Finality.GAMING)
//        eval(UI.answer(Questions.CHOOSE_CPU_OC, "1"))
//        eval(UI.answer(Questions.CHOOSE_COOLER_TYPE, "3") || UI.answer(Questions.CHOOSE_COOLER_TYPE, "4"))
//    then
//	  KnowledgeBase h = new KnowledgeBase();
//    h.setNeedsCPUCooler(true);
//        insert(h);
//end
//
//
//
//rule "r11a1 - Choose Environment Energy Efficiency Instability, answer Negative"
//    when
//	    KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true )
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_ENVIRONMENT_ENERGY_EFFICIENCY_INSTABILITY, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinEnergyEfficiencyNeeded(EnergyEfficiency._80PLUS);
//        insert(h);
//end
//
//rule "r11a2 - Choose Environment Energy Efficiency, answer Positive, a bit problematic"
//    when
//	    KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//        KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_ENVIRONMENT_ENERGY_EFFICIENCY_INSTABILITY, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinEnergyEfficiencyNeeded(EnergyEfficiency._80PLUS_GOLD);
//        insert(h);
//
//end
//
//rule "r11a3 - Choose Environment Energy Efficiency, answer Positive, serious issue"
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_ENVIRONMENT_ENERGY_EFFICIENCY_INSTABILITY, "3"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//        h.setMinEnergyEfficiencyNeeded(EnergyEfficiency._80PLUS_PLATINUM);
//        insert(h);
//
//end
//
//rule "r12a1 - Choose Case Color, answer Black"
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_OPTIONAL_CASE_COLOR, "1"))
//        eval(UI.answer(Questions.CHOOSE_CASE_COLOR, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	    h.setCaseColorPreferred("black");
//        insert(h);
//end
//
//
//
//rule "r12a2 - Choose Case Color, answer White"
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_OPTIONAL_CASE_COLOR, "1"))
//        eval(UI.answer(Questions.CHOOSE_CASE_COLOR, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	  h.setCaseColorPreferred("white");
//      insert(h);
//
//     end
//
//rule "r12a1 - Choose Case Size, answer Micro-ATX "
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_CASE_SIZE, "1"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	  h.setCaseSizePreferred(Case.TowerSizeType.MID_TOWER);
//      insert(h);
//
//end
//
//rule "r12a2 - Choose Case Size, answer Mini-ATX"
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_CASE_SIZE, "2"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	  h.setCaseSizePreferred(Case.TowerSizeType.MICRO_ATX_TOWER);
//      insert(h);
//
//end
//
//rule "r12a3 - Choose Case Size, answer MID Tower"
//    when
//        KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	    KnowledgeBase(finality != Finality.NA)
//        eval(UI.answer(Questions.CHOOSE_CASE_SIZE, "3"))
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//	  h.setCaseSizePreferred(Case.TowerSizeType.MINI_ATX_TOWER);
//      insert(h);
//
//end
//
//
//rule "r13 - All choices were made, Conclusion"
//    when
//	    KnowledgeBase(durationDayChoice!=0 && minStorage.isSSD == true)
//	then
//	  KnowledgeBase h = new KnowledgeBase();
//
//	  System.out.println(h.caseColorPreferred);
//	  System.out.println(h.gpuManufacturerPreferred);
//	  System.out.println(h.cpuCooler.cooler);
//	  System.out.println(h.budgetType);
//	  System.out.println("teste");
//
//end
//
//
//
//
